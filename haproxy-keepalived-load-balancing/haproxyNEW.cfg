global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-A
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
        ssl-default-bind-options no-sslv3

        # Add below lines for tls 1.3 configuration rest you can ignore
        ssl-default-bind-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

defaults
      log global
      mode http
      option tcplog
#      option httplog
      option dontlognull
#      option forwardfor
      option redispatch
      option http-server-close
      timeout connect 5000
      timeout client 50000
      timeout server 50000
      timeout tunnel 3600s
      timeout http-keep-alive 1s
      timeout http-request 15s
      timeout queue 30s
      timeout tarpit 60s
      errorfile 400 /etc/haproxy/errors/400.http
      errorfile 403 /etc/haproxy/errors/403.http
      errorfile 408 /etc/haproxy/errors/408.http
      errorfile 500 /etc/haproxy/errors/500.http
      errorfile 502 /etc/haproxy/errors/502.http
      errorfile 503 /etc/haproxy/errors/503.http
      errorfile 504 /etc/haproxy/errors/504.http


frontend http_in
mode http
option httplog
bind *:80
option forwardfor
redirect scheme https if !{ ssl_fc }

frontend https_in
mode tcp
option tcplog
bind *:443
acl tls req.ssl_hello_type 1
tcp-request inspect-delay 5s
tcp-request content accept if tls
stats uri /haproxy?stats

        acl host_argocd req.ssl_sni -i argocd.nsserver.eu
        acl host_zzz req.ssl_sni -i zzz.nsserver.eu
        acl host_backup req.ssl_sni -i backup.nsserver.eu
        acl host_word req.ssl_sni -i word.nsserver.eu
        acl host_grafana req.ssl_sni -i grafana.nsserver.eu
        acl host_alert req.ssl_sni -i alert.nsserver.eu
        acl host_prom req.ssl_sni -i prom.nsserver.eu




        use_backend https_back_argocd if host_argocd
        use_backend https_back_zzz if host_zzz
        use_backend https_back_backup if host_backup
        use_backend https_back_word if host_word
        use_backend https_back_grafana if host_grafana
        use_backend https_back_alert if host_alert
        use_backend https_back_prom if host_prom



#argocd backend https
backend https_back_argocd
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server argocd.nsserver.eu 192.168.88.240:443 check cookie s1


#zzz backend https
backend https_back_zzz
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server zzz.nsserver.eu 192.168.88.240:443 check cookie s1


#Backup backend https
backend https_back_backup
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server backup.nsserver.eu 192.168.88.25:443 check cookie s1


#word backend https
backend https_back_word
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server word.nsserver.eu 192.168.88.240:443 check cookie s1


#grafana backend https
backend https_back_grafana
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server grafana.nsserver.eu 192.168.88.240:443 check cookie s1


#alert backend https
backend https_back_alert
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server alert.nsserver.eu 192.168.88.240:443 check cookie s1


#prom backend https
backend https_back_prom
mode tcp
option ssl-hello-chk
option httpchk HEAD /default
http-check expect ! rstatus ^5
cookie JSESSIONID prefix nocache
default-server inter 3000 fall 2
server prom.nsserver.eu 192.168.88.240:443 check cookie s1



frontend kubernetes
bind *:6443
option tcplog
mode tcp
default_backend kubernetes-master-nodes

backend kubernetes-master-nodes
mode tcp
balance roundrobin
option tcp-check
server master01.nsserver.eu 192.168.88.128:6443 check fall 3 rise 2
server master02.nsserver.eu 192.168.88.129:6443 check fall 3 rise 2
server master03.nsserver.eu 192.168.88.130:6443 check fall 3 rise 2



#frontend kube-apiserver
#  bind *:6443
#  mode tcp
#  option tcplog
#  default_backend kube-apiserver
#
#backend kube-apiserver
#    mode tcp
#    option tcplog
#    option tcp-check
#    balance roundrobin
#    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
#    server master01.nsserver.eu 192.168.88.128:6443 check # Replace the IP address with your own.
#    server master02.nsserver.eu 192.168.88.129:6443 check # Replace the IP address with your own.
#    server master03.nsserver.eu 192.168.88.130:6443 check # Replace the IP address with your own.
